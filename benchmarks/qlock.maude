***
*** Loop {
***      Remainder Section
***  rs: tmp := enqueue(queue,i);
***  es: queue := tmp;
***  ws: repeat until top(queue) = i;
***      Critical Section
***  cs: tmp := dequeue(queue);
***  ds: queue := tmp
*** }
***
*** rs, es, ws, cs and ds stand for remainder section,  enqueuing section,
*** waiting section, critical section and dequeuing section.
***
fmod LABEL is
  sort Label .
  ops rs es ws cs ds : -> Label .
endfm

fmod PID is
  protecting NAT .
  sort Pid .
  ops p1 p2 nop : -> Pid .
endfm

fmod QUEUE is
  pr PID .
  sort Queue .

  op empty : -> Queue .  
  op __ : Pid Queue -> Queue .  

  op enq : Queue Pid -> Queue .
  op deq : Queue -> Queue .
  op top : Queue -> Pid .  

  var Q : Queue .
  vars X Y : Pid .  

  eq enq(empty,X) = X empty .
  eq enq((Y Q),X) = Y enq(Q,X) .  

  eq deq(empty) = empty .
  eq deq((X Q)) = Q .  

  eq top(empty) = nop .
  eq top((X Q)) = X .  
endfm

mod QLOCK is
  pr LABEL .
  pr PID .
  pr QUEUE .

  sorts Val Sys .
  subsorts Val < Sys .
*** Configurations
  op __ : Sys Sys -> Sys [assoc comm] .  
*** State components
  op pc[_]:_ : Pid Label -> Val .
  op queue:_ : Queue -> Val .  
endm