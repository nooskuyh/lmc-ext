fmod VALUE is
    protecting NAT .
    sorts Value InitValue? Value? .
    subsort  Value < Value? .
    subsort InitValue? < Value? .

    subsort Nat < Value .

    op nilValue : -> InitValue? [ctor] .    

    sort ValueSet .
    subsort Value < ValueSet .    
    op emptyVs : -> ValueSet [ctor] .    
    op _;_ : ValueSet ValueSet -> ValueSet [ctor assoc comm id: emptyVs] .    
endfm

fmod STEP is --- a.k.a program counter (pc)
    sorts Step InitStep .
    subsort InitStep < Step .
    op init : -> InitStep [ctor] .
    ops wait done : -> Step [ctor] .    
endfm


fmod NODE is
    sorts Node Cid  .
    subsort Node < Cid .
    op Node : -> Cid [ctor] .    
endfm        

fmod STATUS is
    protecting NAT .
    protecting STEP .

    sorts Status InitStatus .
    subsort InitStatus < Status .
    sort InitialRound .
    op [_,_] : Nat Step -> Status [ctor format (d d d s d d)] . 
    op [_,_] : Nat InitStep -> InitStatus [ctor ditto] . 

endfm

fmod VOTE-MAP is
    protecting NAT .
    protecting VALUE .
    sorts  VoteMap InitVoteMap Entry InitEntry .
    subsort InitEntry < Entry InitVoteMap < VoteMap .

    op  _|->_ : Value Nat -> Entry [ctor prec 50] .
    op  _|->_ : Value Zero -> InitEntry [ctor prec 50] .

    op none : -> InitEntry [ctor] .
    op _;_ : VoteMap VoteMap -> VoteMap [ctor assoc comm id: none prec 60] .
    op _;_ : InitVoteMap InitVoteMap -> InitVoteMap [ctor assoc comm id: none prec 60] .
endfm

view VoteMap from TRIV to VOTE-MAP is
    sort Elt to VoteMap .
endv

fmod VOTE is
    protecting VOTE-MAP .

    sort Vote .
    op [_,_] : VoteMap Nat -> Vote [ctor prec 70] .

    sort InitVote .
    subsort InitVote < Vote .    
endfm