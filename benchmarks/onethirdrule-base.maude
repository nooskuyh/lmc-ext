fmod VALUE is
    protecting NAT .
    sorts Value InitValue? Value? .
    subsort  Value < Value? .
    subsort InitValue? < Value? .

    subsort Nat < Value .

    op nilValue : -> InitValue? [ctor] .    

    sort ValueSet .
    subsort Value < ValueSet .    
    op emptyVs : -> ValueSet [ctor] .    
    op _;_ : ValueSet ValueSet -> ValueSet [ctor assoc comm id: emptyVs] .    
endfm

fmod STEP is --- a.k.a program counter (pc)
    sorts Step InitStep .
    subsort InitStep < Step .
    op init : -> InitStep [ctor] .
    ops wait done : -> Step [ctor] .    
endfm


fmod NODE is
    sorts Node Cid  .
    subsort Node < Cid .
    op Node : -> Cid [ctor] .    
endfm        